<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unreal GT on Homepage</title>
    <link>https://unrealgt.github.io/</link>
    <description>Recent content in Unreal GT on Homepage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 30 Aug 2019 17:41:50 +0200</lastBuildDate>
    
	<atom:link href="https://unrealgt.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Indroduction</title>
      <link>https://unrealgt.github.io/basics/indroduction/</link>
      <pubDate>Fri, 30 Aug 2019 17:38:45 +0200</pubDate>
      
      <guid>https://unrealgt.github.io/basics/indroduction/</guid>
      <description>UnrealGT is a tool that can generate data from a virtual scene inside the Unreal Engine. The goal is to provide to provide a Toolkit that is as flexible as possible, with many data generation scenarios supported out of the box and the ability to easily extend the built in components for more complex scenarios. To achive this goal this tool is directly integrated into the Engine&amp;rsquo;s editor in the form of a plugin and therfore requires some basic knowldege about the unreal engine.</description>
    </item>
    
    <item>
      <title>Image</title>
      <link>https://unrealgt.github.io/components/generator/image/</link>
      <pubDate>Tue, 20 Aug 2019 15:10:20 +0200</pubDate>
      
      <guid>https://unrealgt.github.io/components/generator/image/</guid>
      <description>GTImageGeneratorComponent  A virtual camera that enerates RGB images. A lot of camera specific paramters like exposure, ISO, shutterspeed, bloom, fov (focal-length) can be configured. These parameters can be found in the Image, PostProcessVolume and Projection Categories.
For maximum compatibility the generated images are encoded in a standardized format currently BMP and PNG are supported.
It is also possible to randomize resolution and gamma, which can bes useful for traning data, more ranomizable properties will be added in the future.</description>
    </item>
    
    <item>
      <title>Depth</title>
      <link>https://unrealgt.github.io/components/generator/depth/</link>
      <pubDate>Tue, 20 Aug 2019 15:10:26 +0200</pubDate>
      
      <guid>https://unrealgt.github.io/components/generator/depth/</guid>
      <description>GTDepthImageGeneratorComponent  Generates depth images. Uses planar depth as default setting, perspective depth can be enabled via bUsePerspectiveDepth.
The depth is encoded in millimeters (mm) in the RGB channels of the image. This means the depth value is a 24bit with a maximum value of 16.777216 km. (TODO add nanometer option). The RGB values can be converted to mm using the following formula: R + G * 256 + B * 256 * 256.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://unrealgt.github.io/basics/installation/</link>
      <pubDate>Fri, 26 Jul 2019 14:14:04 +0200</pubDate>
      
      <guid>https://unrealgt.github.io/basics/installation/</guid>
      <description>Requirements  Unreal Engine 4.21 or higher  Windows  Visual Studio 2017 or 2019 (2015 should work aswell but is not tested)  macOS  XCode Command Line Tools  Linux  Nothing if you already built the engine from source  Installation The only way to install the plugin is to build it from Source in an existing project. This requires you to build your project from source manually.</description>
    </item>
    
    <item>
      <title>Normal</title>
      <link>https://unrealgt.github.io/components/generator/normal/</link>
      <pubDate>Tue, 20 Aug 2019 15:10:33 +0200</pubDate>
      
      <guid>https://unrealgt.github.io/components/generator/normal/</guid>
      <description>GTImageNormalGeneratorComponent  Renders the surface normals of the objects in the scene. The normals are encoded in the RGB channels. They can be converted from RGB to world space coordinates using: RGB -&amp;gt; Normal: 2 * C/255 C - 1 Note: Anti-Aliasing is disabled for normal generators by default!PropertiesImageEGTImageFileFormat  ImageFormatThe format the image will have, currently only .bmp and .png are supported.FIntPoint  ResolutionThe resolution the generated images will have.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://unrealgt.github.io/basics/getting-started/</link>
      <pubDate>Fri, 26 Jul 2019 14:20:36 +0200</pubDate>
      
      <guid>https://unrealgt.github.io/basics/getting-started/</guid>
      <description>The Plugin exposes a vereity of actor components, which can be used to generate data from the virtual world inside the Editor. The following will explain how to capture images data from within level.
First open a level of your choice inside the unreal Editor.
 After that right click in the content browser to create a new Blueprint and choose Actor as base class.
  Open the created Blueprint in the editor.</description>
    </item>
    
    <item>
      <title>Segmentation</title>
      <link>https://unrealgt.github.io/components/generator/segmentation/</link>
      <pubDate>Tue, 20 Aug 2019 15:10:41 +0200</pubDate>
      
      <guid>https://unrealgt.github.io/components/generator/segmentation/</guid>
      <description>GTSegmentationGeneratorComponent  Can generate segmentation for an image. You can assign components color by adding a filter color pair to the ComponentToColor map. Will emit a JSON file containing the configured color mappings called &amp;ldquo;segmentation_info&amp;rdquo; in Saved/UnrealGT/{SessionName}/{Time}/{SegmentationGeneratorName} Requires &amp;ldquo;Enabled with stencil&amp;rdquo; project setting in Engine &amp;gt; Rendering &amp;gt; Postprocessing &amp;gt; Custom-Depth Stencil Pass to be set Note: Anti-Aliasing is disabled for segmentation generators by default!PropertiesImageEGTImageFileFormat  ImageFormatThe format the image will have, currently only .</description>
    </item>
    
    <item>
      <title>Debugging Generation</title>
      <link>https://unrealgt.github.io/basics/debugging-generation/</link>
      <pubDate>Fri, 26 Jul 2019 14:25:09 +0200</pubDate>
      
      <guid>https://unrealgt.github.io/basics/debugging-generation/</guid>
      <description>Click the UnrealGT Icon in the Toolbar to open the debug Window. Type the name of the generator component you want to debug into the text input to render debug info.
 </description>
    </item>
    
    <item>
      <title>ActorInfo</title>
      <link>https://unrealgt.github.io/components/generator/actorinfo/</link>
      <pubDate>Tue, 20 Aug 2019 15:10:48 +0200</pubDate>
      
      <guid>https://unrealgt.github.io/components/generator/actorinfo/</guid>
      <description>GTActorInfoGeneratorComponent  Generates information about actors in a scene (e.g. MeshName, BoundingBoxes, ActorName). The Output format can be customize via formatting strings.PropertiesOutputFString  FormatVector2DStringFString  Format3DBoxStringFString  Format2DBoxStringFString  FormatRotatorStringFString  FormatVector3DStringbool  bAccurateBoundingBoxesDrastically Increase the accuracy of the bounding boxes, but requires an additional render pass. The additional render pass creates a segmentation map for the tracked actors and uses that map to refine the bounding boxes.</description>
    </item>
    
    <item>
      <title>Calibration</title>
      <link>https://unrealgt.github.io/components/generator/calibration/</link>
      <pubDate>Tue, 20 Aug 2019 15:10:48 +0200</pubDate>
      
      <guid>https://unrealgt.github.io/components/generator/calibration/</guid>
      <description>GTCameraCalibrationComponent  Can bes used to get calibration parameters from image generators. Set CameraOneReference to retrieve data for one camera. Set CameraOneReference and CameraTwoReference to generate stereo calibration parameters.PropertiesCamerasFGTGeneratorReference  CameraOneReferenceFGTGeneratorReference  CameraTwoReference</description>
    </item>
    
    <item>
      <title>Http</title>
      <link>https://unrealgt.github.io/components/streamer/http/</link>
      <pubDate>Mon, 26 Aug 2019 23:20:16 +0200</pubDate>
      
      <guid>https://unrealgt.github.io/components/streamer/http/</guid>
      <description>GTHttpStreamerComponent  Example: https://github.com/unrealgt/unrealgt/tree/master/Examples/PythonHTTPClientPropertiesFGTGeneratorReference  GeneratorReferenceHttpFString  TargetUrlEGTHttpMethod  MethodEGTHttpContentType  ContentType</description>
    </item>
    
    <item>
      <title>Tcp</title>
      <link>https://unrealgt.github.io/components/streamer/tcp/</link>
      <pubDate>Tue, 20 Aug 2019 15:11:18 +0200</pubDate>
      
      <guid>https://unrealgt.github.io/components/streamer/tcp/</guid>
      <description>GTSimpleTCPStreamer  Example: https://github.com/unrealgt/unrealgt/tree/master/Examples/PythonTCPClientPropertiesFGTGeneratorReference  GeneratorReferenceFString  IPAddressuint32  Port</description>
    </item>
    
    <item>
      <title>File</title>
      <link>https://unrealgt.github.io/components/streamer/file/</link>
      <pubDate>Tue, 20 Aug 2019 15:11:07 +0200</pubDate>
      
      <guid>https://unrealgt.github.io/components/streamer/file/</guid>
      <description>GTFileStreamerComponent  PropertiesFGTGeneratorReference  GeneratorReferenceFString  FileNameFormat</description>
    </item>
    
    <item>
      <title>ORB-SLAM2</title>
      <link>https://unrealgt.github.io/advanced_examples/orb-slam2/</link>
      <pubDate>Fri, 26 Jul 2019 16:39:11 +0200</pubDate>
      
      <guid>https://unrealgt.github.io/advanced_examples/orb-slam2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>YOLO</title>
      <link>https://unrealgt.github.io/advanced_examples/yolo/</link>
      <pubDate>Fri, 26 Jul 2019 16:38:50 +0200</pubDate>
      
      <guid>https://unrealgt.github.io/advanced_examples/yolo/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>